/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.21.0'
}

dependencies {
    implementation libs.commons.lang3
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

gradlePlugin {
    // Define the plugin
    plugins {
        create('dependencyAnalyzer') {
            id = 'hu.simonadamprog.dependency-analyzer'
            implementationClass = 'hu.simonadamprog.dependency.analyzer.core.DependencyAnalyzerPlugin'
            displayName = 'Dependency Analyzer Gradle Plugin'
        }
    }
}

pluginBundle {
    website = 'https://simonadamprog.hu/dependency-analyzer/'
    vcsUrl = 'https://github.com/simonadamprog/dependency-analyzer'
    description = "Analyzing dependencies in a multi-project codebase. " +
            "Finding root library (direct library dependency / " +
            "first-level library dependency) for a transitive dependency " +
            "and their depending projects that directly use them. " +
            "Displaying unique dependency list. " +
            "Finding all circular dependency chains."
    tags = ["dependency", "analyzer", "java", "project", "jar", "first-level dependency",
    "direct dependency", "root dependency"]
}

group 'hu.simonadamprog.dependency.analyzer.core'
version rootProject.version


// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

task prepareKotlinBuildScriptModel {

}